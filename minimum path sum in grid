class Solution {
    /*
    int func2(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &dp){
        if (i==0 && j==0) return grid[0][0];
        if (i<0 || j<0) return INT_MAX;
        if (dp[i][j]!=-1) return dp[i][j];
        int up=func2(i-1, j, grid, dp);
        int left=func2(i, j-1, grid, dp);
        int mini=min(left, up);
        if (mini==INT_MAX) return INT_MAX;
        return dp[i][j]=mini+grid[i][j];
    }
    */
    /*
    int func1(int i, int j, vector<vector<int>> &grid){
        if (i==0 && j==0) return grid[0][0];
        if (i<0 || j<0) return INT_MAX;
        int up=func1(i-1, j, grid);
        int left=func1(i, j-1, grid);
        int mini=min(left, up);
        if (mini==INT_MAX) return INT_MAX;
        return mini+grid[i][j];
    }
    */
public:
    int minPathSum(vector<vector<int>>& grid) {
        /*
        // 1. recursion
        // TC : O(2^(n + m))
        // SC : O(n + m) 
        int n=grid.size();
        int m=grid[0].size();
        return func1(n-1, m-1, grid);
        */
        /*
        // 2. memoization
        // TC : O(n * m)
        // SC : O(n * m);(dp table + O(n + m))
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        return func2(n-1, m-1, grid, dp);
        */
        /*
        // 3. tabulation
        // TC : O(n * m)
        // SC : O(n * m)
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if (i==0 && j==0) dp[i][j]=grid[i][j];
                else{
                    int up, left;
                    if (i>0) up=dp[i-1][j];
                    else up=INT_MAX;
                    if (j>0) left=dp[i][j-1];
                    else left=INT_MAX;
                    dp[i][j]=grid[i][j]+min(up, left);
                }
            }
        }
        return dp[n-1][m-1];
        */
        // 4. space optimization
        // TC : O(n * m)
        // SC : O(m)
        int n=grid.size();
        int m=grid[0].size();
        vector<int> prev(m, -1);
        for(int i=0;i<n;i++){
            vector<int> temp(m, -1);
            for(int j=0;j<m;j++){
                if (i==0 && j==0) temp[j]=grid[i][j];
                else{
                    int up, left;
                    if (i>0) up=prev[j];
                    else up=INT_MAX;
                    if (j>0) left=temp[j-1];
                    else left=INT_MAX;
                    temp[j]=grid[i][j]+min(up, left);
                }
            }
            prev=temp;
        }
        return prev[m-1];
    }
};
